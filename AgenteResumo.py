import os
from dotenv import load_dotenv
from langchain.chains.summarize import load_summarize_chain
from langchain_community.document_loaders import PyPDFLoader
from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.schema import Document as LangChainDoc
from database_manager import DocumentManager
import json
from datetime import datetime
from pathlib import Path

load_dotenv()

class ProcessadorFinanceiro:
    """Vers√£o corrigida - gera√ß√£o de resumos funcionando"""
    
    def __init__(self, usar_banco_dados: bool = True):
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("OPENAI_API_KEY n√£o encontrada. Configure no arquivo .env")
        
        # CORRE√á√ÉO 1: Modelo v√°lido (gpt-5-nano n√£o existe)
        self.llm = ChatOpenAI(
            temperature=0, 
            model="gpt-4.1-nano",   # Modelo real e mais barato
            max_tokens=2800,
            max_retries=2
        )
        
        self.doc_manager = DocumentManager() if usar_banco_dados else None
        self.prompts = self._criar_prompts()
    
    def _criar_prompts(self):
        """Prompts otimizados para gera√ß√£o consistente de resumos"""

        prompt_release = PromptTemplate(
            input_variables=["text"],
            template="""
Voc√™ √© um analista financeiro s√™nior. Analise este release de resultados e extraia todas as informa√ß√µes relevantes organizadas no formato estruturado abaixo.

## RESUMO EXECUTIVO

### Performance Financeira Principal
‚Ä¢ Receita L√≠quida: [valor atual, varia√ß√£o % trimestre anterior, varia√ß√£o % ano anterior]
‚Ä¢ EBITDA: [valor, margem %, varia√ß√£o % vs trimestres anteriores]
‚Ä¢ Lucro Operacional: [valor, margem %, varia√ß√£o %]
‚Ä¢ Lucro L√≠quido: [valor, margem %, varia√ß√£o %]
‚Ä¢ Fluxo de Caixa Operacional: [valor e varia√ß√£o]

### Indicadores Operacionais
‚Ä¢ Volume de vendas: [quantidade, varia√ß√£o %]
‚Ä¢ Ticket m√©dio: [valor, varia√ß√£o %]
‚Ä¢ Margem Bruta: [%, varia√ß√£o em pontos percentuais]
‚Ä¢ Posi√ß√£o de caixa: [valor total]
‚Ä¢ Estoques: [valor, dias de estoque, varia√ß√£o]
‚Ä¢ CAPEX: [investimentos realizados, varia√ß√£o %]

### Segmentos de Neg√≥cio
‚Ä¢ [Para cada segmento mencionado]: participa√ß√£o na receita, crescimento %, principais drivers
‚Ä¢ Receita por canal de vendas (online, varejo, corporativo, etc.)
‚Ä¢ Performance por linha de produtos principais

### Destaques Operacionais e Estrat√©gicos
‚Ä¢ Lan√ßamentos de produtos no per√≠odo
‚Ä¢ Expans√µes operacionais (novos centros de distribui√ß√£o, f√°bricas, etc.)
‚Ä¢ Parcerias estrat√©gicas anunciadas ou em andamento
‚Ä¢ Investimentos em P&D e inova√ß√£o
‚Ä¢ Reestrutura√ß√µes organizacionais
‚Ä¢ Iniciativas de sustentabilidade e ESG

### Contexto de Mercado e Cen√°rio
‚Ä¢ Principais desafios macroecon√¥micos mencionados
‚Ä¢ Impactos setoriais espec√≠ficos
‚Ä¢ Tend√™ncias de mercado relevantes
‚Ä¢ Posicionamento competitivo

### Riscos e Desafios Identificados
‚Ä¢ Press√µes sobre margens
‚Ä¢ Desafios operacionais espec√≠ficos
‚Ä¢ Riscos regulat√≥rios ou de compliance
‚Ä¢ Impactos de eventos extraordin√°rios
‚Ä¢ Quest√µes de supply chain ou log√≠sticas

### Perspectivas e Guidance
‚Ä¢ Proje√ß√µes para pr√≥ximos trimestres
‚Ä¢ Metas e objetivos declarados
‚Ä¢ Investimentos planejados
‚Ä¢ Estrat√©gias de crescimento
‚Ä¢ Guidance num√©rico (quando dispon√≠vel)

### Eventos Relevantes do Per√≠odo
‚Ä¢ Aquisi√ß√µes, desinvestimentos ou reorganiza√ß√µes
‚Ä¢ Mudan√ßas na estrutura societ√°ria
‚Ä¢ Eventos operacionais significativos
‚Ä¢ Impactos de for√ßa maior

---

**INSTRU√á√ïES ESPEC√çFICAS:**
1. Extraia APENAS informa√ß√µes que est√£o explicitamente mencionadas no documento
2. Sempre inclua os valores num√©ricos exatos quando dispon√≠veis
3. Para varia√ß√µes percentuais, indique sempre o per√≠odo de compara√ß√£o
4. Se alguma se√ß√£o n√£o tiver informa√ß√µes dispon√≠veis, escreva "N√£o mencionado no release"
5. Mantenha linguagem objetiva e corporativa
6. N√£o fa√ßa interpreta√ß√µes ou an√°lises al√©m do que est√° escrito
7. Preserve a terminologia t√©cnica e financeira original

**DOCUMENTO PARA AN√ÅLISE:**
{text}

Organize as informa√ß√µes de forma clara e estruturada, priorizando dados quantitativos e fatos objetivos.
"""
        )
    
        prompt_transcricao = PromptTemplate(
            input_variables=["text"],
            template="""
Analise esta transcri√ß√£o de call de resultados e extraia os pontos principais:

## MENSAGENS PRINCIPAIS DA GEST√ÉO
‚Ä¢ [3-4 pontos estrat√©gicos mais importantes comunicados]

## TOM E CONFIAN√áA
‚Ä¢ N√≠vel de confian√ßa: [Alto/M√©dio/Baixo]
‚Ä¢ Tom predominante: [Otimista/Equilibrado/Cauteloso/Preocupado]
‚Ä¢ Transpar√™ncia: [Alta/M√©dia/Limitada]

## ESTRAT√âGIAS E DIRECIONAMENTOS
‚Ä¢ Iniciativas estrat√©gicas mencionadas
‚Ä¢ Investimentos e expans√µes planejadas
‚Ä¢ Foco operacional para pr√≥ximos per√≠odos

## PONTOS CR√çTICOS
‚Ä¢ Desafios mais mencionados pela gest√£o
‚Ä¢ Press√µes competitivas ou de mercado
‚Ä¢ Medidas corretivas em andamento

TRANSCRI√á√ÉO PARA AN√ÅLISE:
{text}

Foque nas mensagens qualitativas e no que a gest√£o realmente comunicou.
"""
        )
        prompt_demonstracoes = PromptTemplate(
        input_variables=["text"],
        template="""
Analise estas demonstra√ß√µes financeiras e extraia os dados.
O documento apresenta colunas separadas para CONSOLIDADO e CONTROLADORA, com per√≠odos comparativos.

## ESTRUTURA ESPERADA

### DEMONSTRA√á√ÉO DO RESULTADO 
**Per√≠odo Atual vs Per√≠odo Anterior:**
‚Ä¢ Receita Bruta: [valor atual] vs [valor anterior] - Varia√ß√£o: [%]
‚Ä¢ Receita L√≠quida: [valor atual] vs [valor anterior] - Varia√ß√£o: [%]
‚Ä¢ Custo dos Produtos Vendidos: [valor atual] vs [valor anterior]
‚Ä¢ Lucro Bruto: [valor atual] vs [valor anterior] - Margem: [% atual] vs [% anterior]
‚Ä¢ Despesas Operacionais: [valor atual] vs [valor anterior]
‚Ä¢ EBITDA: [valor atual] vs [valor anterior] - Margem: [% atual] vs [% anterior]
‚Ä¢ Resultado Financeiro: [valor atual] vs [valor anterior]
‚Ä¢ Lucro L√≠quido Consolidado: [valor atual] vs [valor anterior] - Margem: [% atual] vs [% anterior]
  - Atribu√≠do aos controladores: [valor atual] vs [valor anterior]
  - Atribu√≠do aos n√£o controladores: [valor atual] vs [valor anterior]

### BALAN√áO PATRIMONIAL - CONSOLIDADO
**Per√≠odo Atual vs Per√≠odo Anterior:**
‚Ä¢ Ativo Total: [valor atual] vs [valor anterior] - Varia√ß√£o: [%]
‚Ä¢ Ativo Circulante: [valor atual] vs [valor anterior]
  - Caixa e Equivalentes: [valor atual] vs [valor anterior]
  - Contas a Receber: [valor atual] vs [valor anterior]
  - Estoques: [valor atual] vs [valor anterior]
‚Ä¢ Ativo N√£o Circulante: [valor atual] vs [valor anterior]
  - Imobilizado: [valor atual] vs [valor anterior]
  - Intang√≠vel: [valor atual] vs [valor anterior]
‚Ä¢ Passivo Total: [valor atual] vs [valor anterior]
‚Ä¢ Passivo Circulante: [valor atual] vs [valor anterior]
  - Empr√©stimos CP: [valor atual] vs [valor anterior]
  - Fornecedores: [valor atual] vs [valor anterior]
‚Ä¢ Passivo N√£o Circulante: [valor atual] vs [valor anterior]
  - Empr√©stimos LP: [valor atual] vs [valor anterior]
‚Ä¢ Patrim√¥nio L√≠quido Consolidado: [valor atual] vs [valor anterior]
  - Atribu√≠do aos controladores: [valor atual] vs [valor anterior]
  - Atribu√≠do aos n√£o controladores: [valor atual] vs [valor anterior]

### INDICADORES CALCULADOS

‚Ä¢ Margem Bruta: [% atual] vs [% anterior]
‚Ä¢ Margem EBITDA: [% atual] vs [% anterior]
‚Ä¢ Margem L√≠quida: [% atual] vs [% anterior]
‚Ä¢ ROE Consolidado: [% atual] vs [% anterior]
‚Ä¢ Liquidez Corrente: [atual] vs [anterior]
‚Ä¢ Endividamento: [% atual] vs [% anterior]

### PRINCIPAIS VARIA√á√ïES IDENTIFICADAS

‚Ä¢ Maiores crescimentos em receita: [itens e %]
‚Ä¢ Maiores varia√ß√µes em custos: [itens e %]
‚Ä¢ Mudan√ßas significativas no balan√ßo: [itens e valores]

### OUTROS RESULTADOS ABRANGENTES
‚Ä¢ Diferen√ßas de C√¢mbio: [valores]
‚Ä¢ Hedges de Fluxo de Caixa: [valores]
‚Ä¢ Resultado Abrangente Total: [consolidado e controladora]

### DADOS PARA BENCHMARKING (IMPORTANTE)

‚Ä¢ Faturamento L√≠quido: 
[valores] - Varia√ß√£o: [%]
‚Ä¢ Lucro Bruto: 
[valores]  - Varia√ß√£o: [%]
‚Ä¢ Lucro L√≠quido: 
[valores] - Varia√ß√£o: [%]
‚Ä¢ Caixa e Equivalente: 
[valores] - Varia√ß√£o: [%]
‚Ä¢ Estoques: 
[valores] - Varia√ß√£o: [%]



### INSTRU√á√ïES CR√çTICAS
1. SEPARAR claramente os dados CONSOLIDADOS dos da CONTROLADORA somente no Balan√ßo Patrimonial e nos indicadores relacionados.
2. Nas demais demonstra√ß√µes, considerar apenas o CONSOLIDADO.
3. Para cada valor, apresentar Per√≠odo Atual vs Per√≠odo Anterior.
4. Calcular varia√ß√µes percentuais quando poss√≠vel.
5. Se algum dado n√£o estiver dispon√≠vel, escrever ‚ÄúN√£o informado‚Äù.
6. Especificar se os n√∫meros s√£o trimestrais ou semestrais.
7. Identificar qual coluna √© a mais recente (ex.: ‚Äú30/06/2025‚Äù vs ‚Äú30/06/2024‚Äù) e usar como Per√≠odo Atual.


**DOCUMENTO PARA AN√ÅLISE:**
{text}

Organize as informa√ß√µes de forma clara, priorizando dados num√©ricos verific√°veis.
"""
        )
        return {
            'release': prompt_release,
            'transcricao': prompt_transcricao,
            'demonstracoes': prompt_demonstracoes  # Placeholder para futuros prompts
        } 
    def processar_demonstracoes_financeiras(self, pdf_path: str, trimestre: str = None) -> dict:
        """Processa demonstra√ß√µes financeiras com foco em dados cont√°beis"""

        pdf_path = Path(pdf_path)
        print(f"üìä Processando Demonstra√ß√µes Financeiras: {pdf_path.name}")

        if not pdf_path.exists():
            return self._erro_resultado('demonstracoes', str(pdf_path), f'Arquivo n√£o encontrado: {pdf_path}')

        try:
            # Carrega o PDF
            loader = PyPDFLoader(str(pdf_path))
            documents = loader.load()

            if not documents:
                return self._erro_resultado('demonstracoes', str(pdf_path), 'PDF vazio ou n√£o pode ser lido')

            # Demonstra√ß√µes podem ter mais p√°ginas
            docs_limitados = documents[:15]

            # Verifica conte√∫do
            conteudo_total = ""
            for doc in docs_limitados:
                conteudo_total += doc.page_content + "\n"

            if len(conteudo_total.strip()) < 50:
                return self._erro_resultado('demonstracoes', str(pdf_path), 'Conte√∫do do PDF insuficiente')

            print(f"üìÑ Conte√∫do extra√≠do: {len(conteudo_total)} caracteres")

            # Usa o prompt espec√≠fico para demonstra√ß√µes
            chain = load_summarize_chain(
                self.llm, 
                chain_type="stuff",
                prompt=self.prompts['demonstracoes'],
                verbose=True
            )

            print("ü§ñ Gerando an√°lise das demonstra√ß√µes financeiras...")
            resumo_response = chain.invoke({"input_documents": docs_limitados})

            # Extrai o resultado
            if isinstance(resumo_response, dict) and 'output_text' in resumo_response:
                resumo = resumo_response['output_text']
            elif hasattr(resumo_response, 'content'):
                resumo = resumo_response.content
            else:
                resumo = str(resumo_response)

            if not resumo or len(resumo.strip()) < 20:
                return self._erro_resultado('demonstracoes', str(pdf_path), 'An√°lise gerada est√° vazia')

            resultado = {
                'tipo': 'demonstracoes_financeiras',
                'arquivo': str(pdf_path),
                'trimestre': trimestre,
                'timestamp': datetime.now().isoformat(),
                'resumo': resumo.strip(),
                'num_paginas': len(docs_limitados),
                'tamanho_conteudo': len(conteudo_total),
                'status': 'sucesso'
            }

            # Salva no banco se dispon√≠vel
            if self.doc_manager:
                self._salvar_processamento(resultado)

            print("‚úÖ Demonstra√ß√µes financeiras processadas com sucesso")
            print(f"üìù An√°lise gerada: {len(resumo)} caracteres")
            return resultado

        except Exception as e:
            print(f"‚ùå Erro no processamento das demonstra√ß√µes: {e}")
            import traceback
            traceback.print_exc()
            return self._erro_resultado('demonstracoes', str(pdf_path), str(e))
    def processar_release_resultados(self, pdf_path: str, trimestre: str = None) -> dict:
        """CORRIGIDO: Processa release de resultados com melhor tratamento de erros"""
        
        pdf_path = Path(pdf_path)
        print(f"üìä Processando Release: {pdf_path.name}")
        
        if not pdf_path.exists():
            return self._erro_resultado('release', str(pdf_path), f'Arquivo n√£o encontrado: {pdf_path}')
        
        try:
            # CORRE√á√ÉO 2: Melhor tratamento do carregamento do PDF
            loader = PyPDFLoader(str(pdf_path))
            documents = loader.load()
            
            if not documents:
                return self._erro_resultado('release', str(pdf_path), 'PDF vazio ou n√£o pode ser lido')
            
            # CORRE√á√ÉO 3: Limita conte√∫do para evitar exceeder limite de tokens
            docs_limitados = documents[:8]  # M√°ximo 8 p√°ginas
            
            # CORRE√á√ÉO 4: Verifica se h√° conte√∫do v√°lido
            conteudo_total = ""
            for doc in docs_limitados:
                conteudo_total += doc.page_content + "\n"
            
            if len(conteudo_total.strip()) < 50:
                return self._erro_resultado('release', str(pdf_path), 'Conte√∫do do PDF insuficiente')
            
            print(f"üìÑ Conte√∫do extra√≠do: {len(conteudo_total)} caracteres")
            
            # CORRE√á√ÉO 5: Melhor configura√ß√£o da chain
            chain = load_summarize_chain(
                self.llm, 
                chain_type="stuff",
                prompt=self.prompts['release'],
                verbose=True  # Para debug
            )
            
            # CORRE√á√ÉO 6: Executa com tratamento espec√≠fico
            print("ü§ñ Gerando resumo com IA...")
            resumo_response = chain.invoke({"input_documents": docs_limitados})
            
            # CORRE√á√ÉO 7: Extrai o resultado corretamente
            if isinstance(resumo_response, dict) and 'output_text' in resumo_response:
                resumo = resumo_response['output_text']
            elif hasattr(resumo_response, 'content'):
                resumo = resumo_response.content
            else:
                resumo = str(resumo_response)
            
            if not resumo or len(resumo.strip()) < 20:
                return self._erro_resultado('release', str(pdf_path), 'Resumo gerado est√° vazio ou muito curto')
            
            resultado = {
                'tipo': 'release_resultados',
                'arquivo': str(pdf_path),
                'trimestre': trimestre,
                'timestamp': datetime.now().isoformat(),
                'resumo': resumo.strip(),
                'num_paginas': len(docs_limitados),
                'tamanho_conteudo': len(conteudo_total),
                'status': 'sucesso'
            }
            
            # Salva no banco se dispon√≠vel
            if self.doc_manager:
                self._salvar_processamento(resultado)
            
            print("‚úÖ Release processado com sucesso")
            print(f"üìù Resumo gerado: {len(resumo)} caracteres")
            return resultado
            
        except Exception as e:
            print(f"‚ùå Erro no processamento do release: {e}")
            import traceback
            traceback.print_exc()
            return self._erro_resultado('release', str(pdf_path), str(e))
    
    def processar_transcricao(self, arquivo_path: str, trimestre: str = None) -> dict:
        """CORRIGIDO: Processa transcri√ß√£o com suporte a m√∫ltiplos formatos"""

        arquivo_path = Path(arquivo_path)
        print(f"üé§ Processando transcri√ß√£o: {arquivo_path.name}")
    
        if not arquivo_path.exists():
            return self._erro_resultado('transcricao', str(arquivo_path), f'Arquivo n√£o encontrado')
    
        try:
            texto = ""
            extensao = arquivo_path.suffix.lower()
            
            # CORRE√á√ÉO 8: Melhor tratamento por tipo de arquivo
            if extensao == '.docx':
                try:
                    from docx import Document
                    doc = Document(arquivo_path)
                    paragrafos = [p.text.strip() for p in doc.paragraphs if p.text.strip()]
                    texto = "\n".join(paragrafos)
                except ImportError:
                    return self._erro_resultado('transcricao', str(arquivo_path), 'Instale: pip install python-docx')
                except Exception as e:
                    return self._erro_resultado('transcricao', str(arquivo_path), f'Erro ao ler DOCX: {e}')
    
            elif extensao == '.pdf':
                try:
                    loader = PyPDFLoader(str(arquivo_path))
                    documentos = loader.load()
                    texto = "\n".join([d.page_content for d in documentos])
                except Exception as e:
                    return self._erro_resultado('transcricao', str(arquivo_path), f'Erro ao ler PDF: {e}')
    
            elif extensao in ['.txt', '.text']:
                try:
                    with open(arquivo_path, 'r', encoding='utf-8') as f:
                        texto = f.read()
                except UnicodeDecodeError:
                    try:
                        with open(arquivo_path, 'r', encoding='latin-1') as f:
                            texto = f.read()
                    except Exception as e:
                        return self._erro_resultado('transcricao', str(arquivo_path), f'Erro de codifica√ß√£o: {e}')
            else:
                return self._erro_resultado('transcricao', str(arquivo_path), f'Formato n√£o suportado: {extensao}')
    
            if not texto or len(texto.strip()) < 50:
                return self._erro_resultado('transcricao', str(arquivo_path), 'Arquivo vazio ou conte√∫do insuficiente')
    
            print(f"üìÑ Conte√∫do extra√≠do: {len(texto)} caracteres")
            
            # CORRE√á√ÉO 9: Limita tamanho de forma mais inteligente
            if len(texto) > 25000:  # Limite mais generoso
                texto_limitado = texto[:25000] + "\n... [CONTE√öDO TRUNCADO]"
                print("‚ö†Ô∏è Conte√∫do truncado para caber nos limites")
            else:
                texto_limitado = texto
    
            # Cria documento LangChain
            documents = [LangChainDoc(page_content=texto_limitado)]
    
            # CORRE√á√ÉO 10: Executa processamento
            chain = load_summarize_chain(
                self.llm,
                chain_type="stuff",
                prompt=self.prompts['transcricao'],
                verbose=True
            )
    
            print("ü§ñ Gerando resumo da transcri√ß√£o...")
            resumo_response = chain.invoke({"input_documents": documents})
            
            # Extrai resultado
            if isinstance(resumo_response, dict) and 'output_text' in resumo_response:
                resumo = resumo_response['output_text']
            elif hasattr(resumo_response, 'content'):
                resumo = resumo_response.content
            else:
                resumo = str(resumo_response)
                
            if not resumo or len(resumo.strip()) < 20:
                return self._erro_resultado('transcricao', str(arquivo_path), 'Resumo gerado est√° vazio')
    
            resultado = {
                'tipo': 'transcricao',
                'arquivo': str(arquivo_path),
                'trimestre': trimestre,
                'timestamp': datetime.now().isoformat(),
                'resumo': resumo.strip(),
                'tamanho_original': len(texto),
                'tamanho_processado': len(texto_limitado),
                'status': 'sucesso'
            }
    
            if self.doc_manager:
                self._salvar_processamento(resultado)
    
            print("‚úÖ Transcri√ß√£o processada com sucesso")
            print(f"üìù Resumo gerado: {len(resumo)} caracteres")
            return resultado
    
        except Exception as e:
            print(f"‚ùå Erro na transcri√ß√£o: {e}")
            import traceback
            traceback.print_exc()
            return self._erro_resultado('transcricao', str(arquivo_path), str(e))

    def processar_trimestre_completo(self, pasta_trimestre: str, trimestre: str) -> dict:
        """CORRIGIDO: M√©todo que estava faltando - processa pasta completa"""
        
        print(f"üöÄ Processamento completo do trimestre: {trimestre}")
        pasta = Path(pasta_trimestre)
        
        if not pasta.exists():
            return {
                'trimestre': trimestre,
                'status': 'erro',
                'erro': f'Pasta n√£o encontrada: {pasta}',
                'arquivos_processados': []
            }
        
        resultados = {
            'trimestre': trimestre,
            'pasta': str(pasta),
            'timestamp': datetime.now().isoformat(),
            'arquivos_processados': [],
            'resumo_executivo': None,
            'status': 'sucesso'
        }
        
        # Mapeia todos os arquivos da pasta
        arquivos_release = []
        arquivos_transcricao = []
        outros_pdfs = []
        
        for arquivo in pasta.glob("*"):
            if not arquivo.is_file():
                continue
                
            nome = arquivo.name.lower()
            extensao = arquivo.suffix.lower()
            
            # Classifica por tipo
            if "resultados" in nome and extensao == ".pdf":
                arquivos_release.append(arquivo)
            elif "transcricao" in nome or "transcript" in nome:
                arquivos_transcricao.append(arquivo)
            elif extensao == ".pdf":
                outros_pdfs.append(arquivo)
        
        print(f"üìã Arquivos encontrados:")
        print(f"   üìä Releases: {len(arquivos_release)}")
        print(f"   üé§ Transcri√ß√µes: {len(arquivos_transcricao)}")  
        print(f"   üìÑ Outros PDFs: {len(outros_pdfs)}")
        
        # Processa releases
        for arquivo in arquivos_release:
            resultado = self.processar_release_resultados(str(arquivo), trimestre)
            resultados['arquivos_processados'].append(resultado)
        
        # Processa transcri√ß√µes  
        for arquivo in arquivos_transcricao:
            resultado = self.processar_transcricao(str(arquivo), trimestre)
            resultados['arquivos_processados'].append(resultado)
            
        # Processa as demonstraa√ß√µes financeiras se houver
        for arquivo in outros_pdfs:
            resultado = self.processar_demonstracoes_financeiras(str(arquivo), trimestre)
            resultados['arquivos_processados'].append(resultado)

        
        # Gera resumo consolidado
        resumos_sucesso = [arq['resumo'] for arq in resultados['arquivos_processados'] if arq['status'] == 'sucesso']
        
        if resumos_sucesso:
            if len(resumos_sucesso) > 1:
                resultados['resumo_executivo'] = self._consolidar_com_llm(resumos_sucesso, trimestre)
            else:
                resultados['resumo_executivo'] = self._consolidar_simples(resumos_sucesso, trimestre)
        else:
            resultados['resumo_executivo'] = f"‚ùå Nenhum arquivo do {trimestre} foi processado com sucesso."
        
        self._salvar_resultado_completo(resultados)
        
        sucessos = len([r for r in resultados['arquivos_processados'] if r['status'] == 'sucesso'])
        print(f"‚úÖ Processamento conclu√≠do: {sucessos}/{len(resultados['arquivos_processados'])} arquivos processados")
        return resultados

    def _consolidar_simples(self, resumos: list, trimestre: str) -> str:
        """Consolida√ß√£o simples para documento √∫nico"""
        
        if len(resumos) == 1:
            return f"**RESUMO {trimestre}**\n\n{resumos[0]}"
        
        consolidado = f"**RESUMO CONSOLIDADO - {trimestre}**\n\n"
        
        for i, resumo in enumerate(resumos, 1):
            tipo = "RELEASE DE RESULTADOS" if i == 1 else "CALL/TRANSCRI√á√ÉO"
            consolidado += f"**{tipo}:**\n{resumo}\n\n"
        
        return consolidado
    
    def _consolidar_com_llm(self, resumos: list, trimestre: str) -> str:
        """CORRIGIDO: Usa LLM para consolida√ß√£o mais inteligente"""
        
        if len(resumos) == 1:
            return f"**{trimestre}**\n\n{resumos[0]}"
        
        # Prompt para consolida√ß√£o
        separador = "\n" + "="*50 + "\n"
        texto_resumos = separador.join(resumos)
        
        prompt_consolidacao = f"""
Com base nas an√°lises do {trimestre}, produza um RESUMO EXECUTIVO no estilo de release de resultados corporativos, bem estruturado, coeso e de leitura fluida.  
Use linguagem clara, objetiva e em formato de par√°grafos (n√£o apenas bullets), mas preserve a divis√£o em se√ß√µes.  

## RESUMO EXECUTIVO - {trimestre.upper()}

### Performance Financeira
- Apresente os principais n√∫meros de receita, EBITDA, lucro l√≠quido e margens, sempre destacando as varia√ß√µes em rela√ß√£o ao mesmo per√≠odo do ano anterior.  
- Estruture em formato narrativo, integrando os n√∫meros com uma an√°lise breve de desempenho.

### Principais Realiza√ß√µes
- Relate os avan√ßos estrat√©gicos, operacionais e de portf√≥lio de forma conectada, mostrando impacto direto nos resultados.  
- Destaque movimentos como expans√£o de contratos, inova√ß√£o em produtos, crescimento em determinados segmentos e diversifica√ß√£o de receita.

### Direcionamentos da Gest√£o
- Explique as prioridades e o posicionamento da companhia para os pr√≥ximos per√≠odos.  
- Inclua guidance, expectativas de mercado e vis√£o estrat√©gica, sempre em tom institucional e positivo.

### Pontos de Aten√ß√£o
- Aborde de forma integrada os principais desafios e riscos: press√µes de margem, cen√°rio macroecon√¥mico, retra√ß√µes setoriais ou fatores conjunturais.  
- O tom deve ser de reconhecimento do desafio, mas com vi√©s de supera√ß√£o.

## Estrat√©gias, Transforma√ß√µes e Desafios
- Fa√ßa um fechamento anal√≠tico, mostrando como a empresa est√° se transformando, consolidando novas avenidas de crescimento e lidando com o ambiente competitivo.  
- Construa um texto que una indicadores quantitativos (n√∫meros) e qualitativos (mensagens da gest√£o).

---

DOCUMENTOS ANALISADOS:
{texto_resumos}

IMPORTANTE:
- O resultado final deve ser um texto coeso e cont√≠nuo, no estilo de um press release executivo.  
- Evite apenas listar itens: crie uma narrativa clara, fluida e completa.  
- Seja conciso, mas n√£o superficial.  
"""
        
        try:
            print("üß† Gerando resumo executivo consolidado...")
            resposta = self.llm.invoke(prompt_consolidacao)
            resultado = resposta.content if hasattr(resposta, 'content') else str(resposta)
            
            if resultado and len(resultado.strip()) > 50:
                return resultado
            else:
                print("‚ö†Ô∏è Consolida√ß√£o LLM falhou, usando m√©todo simples")
                return self._consolidar_simples(resumos, trimestre)
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na consolida√ß√£o LLM: {e}")
            return self._consolidar_simples(resumos, trimestre)
    
    def _erro_resultado(self, tipo: str, arquivo: str, erro: str) -> dict:
        """Padroniza retorno de erro"""
        return {
            'tipo': tipo,
            'arquivo': arquivo,
            'status': 'erro',
            'erro': erro,
            'timestamp': datetime.now().isoformat(),
            'resumo': f'ERRO: {erro}'
        }
    
    def _salvar_processamento(self, resultado: dict):
        """Salva processamento individual"""
        if self.doc_manager:
            try:
                self.doc_manager.salvar_processamento(resultado)
            except Exception as e:
                print(f"Erro ao salvar no banco: {e}")
    
    def _salvar_resultado_completo(self, resultados: dict):
        """Salva resultado em arquivo"""
        try:
            pasta_resultados = Path("resultados_analises")
            pasta_resultados.mkdir(exist_ok=True)
            
            timestamp = datetime.now().strftime('%Y%m%d_%H%M')
            arquivo = pasta_resultados / f"analise_{resultados['trimestre']}_{timestamp}.json"
            
            with open(arquivo, 'w', encoding='utf-8') as f:
                json.dump(resultados, f, indent=2, ensure_ascii=False)
            
            print(f"üíæ Resultado salvo: {arquivo}")
            
            if self.doc_manager:
                self.doc_manager.salvar_analise_completa(resultados)
                
        except Exception as e:
            print(f"Erro ao salvar arquivo: {e}")


# Fun√ß√£o de compatibilidade melhorada
def resumir_pdf_melhorado(pdf_path, trimestre=None, custom_prompt=None):
    """Fun√ß√£o compat√≠vel - corrigida"""
    
    try:
        processor = ProcessadorFinanceiro(usar_banco_dados=False)
        
        if custom_prompt:
            # Processa com prompt personalizado
            loader = PyPDFLoader(pdf_path)
            documents = loader.load()[:5]  # M√°ximo 5 p√°ginas
            
            if not documents:
                return "Erro: PDF vazio"
            
            chain = load_summarize_chain(
                processor.llm, 
                chain_type="stuff", 
                prompt=custom_prompt
            )
            resultado = chain.invoke({"input_documents": documents})
            
            if isinstance(resultado, dict) and 'output_text' in resultado:
                return resultado['output_text']
            return str(resultado)
        else:
            # Usa processamento padr√£o
            resultado = processor.processar_release_resultados(pdf_path, trimestre)
            return resultado['resumo'] if resultado['status'] == 'sucesso' else f"Erro: {resultado.get('erro')}"
                
    except Exception as e:
        return f"Erro: {str(e)}"


def testar_correcao():
    """Teste das corre√ß√µes"""
    try:
        if not os.getenv("OPENAI_API_KEY"):
            print("‚ùå Configure OPENAI_API_KEY no arquivo .env")
            return False
        
        processor = ProcessadorFinanceiro(usar_banco_dados=False)
        print("‚úÖ ProcessadorFinanceiro inicializado com sucesso")
        
        # Teste b√°sico do LLM
        resposta = processor.llm.invoke("Teste de conex√£o: responda apenas 'OK'")
        print(f"‚úÖ LLM respondeu: {resposta.content if hasattr(resposta, 'content') else resposta}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False


if __name__ == "__main__":
    print("üîß TESTE DAS CORRE√á√ïES")
    print("="*40)
    
    if not testar_correcao():
        print("‚ùå Teste falhou - verifique configura√ß√£o")
        exit(1)
    
    print("\nüöÄ PROCESSADOR CORRIGIDO PRONTO")
    print("="*40)
    
    # Exemplo de uso
    try:
        processor = ProcessadorFinanceiro()
        
        # Teste com pasta exemplo
        pasta_exemplo = "downloads/2024/T3"
        if Path(pasta_exemplo).exists():
            resultado = processor.processar_trimestre_completo(pasta_exemplo, "3T24")
            print(f"\nüìä RESULTADO - {resultado['trimestre']}:")
            print("-" * 30)
            if resultado['resumo_executivo']:
                print(resultado['resumo_executivo'])
                print("-" * 30)
                print("Tranformando dados benchmarking em tabela...")
                from table import  executar_benchmarking_automatico
                tabela = executar_benchmarking_automatico()
                
            else:
                print("‚ùå Nenhum resumo foi gerado")
                
        else:
            print(f"‚ÑπÔ∏è Pasta de exemplo n√£o encontrada: {pasta_exemplo}")
            print("   Crie uma pasta com arquivos PDF para testar")
            
    except Exception as e:
        print(f"‚ùå Erro na execu√ß√£o: {e}")
        import traceback
        traceback.print_exc()